  
" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on
" curl -fLo  C:/Users\MF/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin()
" general
Plug 'sheerun/vim-polyglot'
Plug 'vim-scripts/Align'
Plug 'Lokaltog/vim-easymotion'
Plug 'Yggdroot/indentLine'
Plug 'Chiel92/vim-autoformat'


"================================================
" Dev Tools
"================================================
Plug 'rking/ag.vim'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-dispatch'
Plug 'bootleq/vim-qrpsqlpq'
Plug 'thinca/vim-quickrun'
Plug 'janko-m/vim-test'
Plug 'tpope/vim-cucumber'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'majutsushi/tagbar' " list all methods in a file
Plug 'neomake/neomake'
" Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}

"ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'

" clojure
Plug 'tpope/vim-fireplace'
" Plug 'Valloric/YouCompleteMe'
Plug 'tpope/vim-dispatch'
" Plug 'Olical/conjure', {'tag': 'v2.1.2', 'do': 'bin/compile'}
" Plug 'eraserhd/parinfer-rust', {'do': 'cargo build --release'} "ubuntu 18.04 need run 'sudo apt install clang libclang-dev'

" python
Plug 'sheerun/vim-polyglot'
Plug 'Vimjas/vim-python-pep8-indent',      { 'for': 'python' }

" Plug 'guns/vim-sexp'
" Plug 'tpope/vim-sexp-mappings-for-regular-people'
" Plug 'davidhalter/jedi-vim'

"================================================
" Javascript/HTML
"================================================
Plug 'kchmck/vim-coffee-script'
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-ragtag'
Plug 'othree/javascript-libraries-syntax.vim'

"================================================
" Git
"================================================
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"================================================
" Enhance Vim
"================================================
Plug 'ap/vim-buftabline'
Plug 'jiangmiao/auto-pairs'
Plug 'austintaylor/vim-indentobject'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
" Plug 'pedrohdz/vim-yaml-folds'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'

call plug#end()

" Keyboard shortcuts {{{
set expandtab                                                " expand tabs to spaces
set ignorecase                                               " case-insensitive search
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set hidden
set hlsearch
set nowrap
"set list " show trailing spaces
" set cursorline
"set nostartofline
set mouse=a
set number
set relativenumber
set nobackup
set nowritebackup
set noswapfile
set shiftwidth=2
set tabstop=2


set scrolloff=3

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nmap \ ,
nnoremap ' `
nnoremap ` '
inoremap jj <ESC>
nmap <leader>ww  :w<CR>
imap <leader>ww  <ESC>:w<CR>
noremap  ,, <C-\><C-N>
noremap  L $
noremap  H ^
noremap  <C-R>e $
noremap! ,, <C-\><C-N>
snoremap ,, <C-\><C-N>

inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

noremap <leader>q  :wq!<CR>
nnoremap <leader>=  <C-W>=
nnoremap <leader>n  :set number! number?<CR>
nnoremap <Leader>hl :set hlsearch! hlsearch?<CR>
nnoremap <Leader>ps :set paste! paste?<CR>
nnoremap <leader>iw :set invwrap wrap?<CR>
nnoremap <leader>ew :e <C-R>=expand('%:h').'/'<cr>
nnoremap <leader>es :sp <C-R>=expand('%:h').'/'<cr>
nnoremap <leader>ev :vsp <C-R>=expand('%:h').'/'<cr>
nnoremap <leader>et :tabe <C-R>=expand('%:h').'/'<cr>
" nnoremap <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>
" nnoremap <leader>p obinding.pry<Esc>
nnoremap <leader>co oconsole.log();<Left><Left>
nnoremap <leader>pep :%! autopep8 -<CR>

" python execute

vmap <leader>rp :!python<CR>
nnoremap <leader>rp :!python %<CR>
" for windows
vmap <leader>rp :!python.exe<CR>
nnoremap <leader>wrp :!python.exe %<CR>


" buffer width
nnoremap <leader><C-H> :vertical resize -10<CR>
nnoremap <leader><C-J> :resize -10<CR>
nnoremap <leader><C-K> :resize +10<CR>
nnoremap <leader><C-L> :vertical resize +10<CR>



" NerdTree Setting
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let g:NERDSpaceDelims=1

"buftabline
nnoremap <Tab> :bnext<CR>
nnoremap <S-tab> :bprev<CR>

vmap <Enter>   <Plug>(EasyAlign)

" }}}
